<?xml version="1.0" encoding="GBK"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<!-- 定义数据源Bean，使用C3P0(开源的JDBC连接池)数据源实现 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost/hrSystem"/>
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="root"/>
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="root"/>
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="40"/>
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="1"/>
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="1"/>
		<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
		<property name="maxIdleTime" value="20"/>
	</bean>

	<!-- DAO层：定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>org/zs/hrsystem/model/Application.hbm.xml</value>
				<value>org/zs/hrsystem/model/Attend.hbm.xml</value>
				<value>org/zs/hrsystem/model/AttendType.hbm.xml</value>
				<value>org/zs/hrsystem/model/CheckBack.hbm.xml</value>
				<value>org/zs/hrsystem/model/Employee.hbm.xml</value>
				<value>org/zs/hrsystem/model/Payment.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 指定数据库方言 -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<!-- 是否根据需要每次自动创建数据库 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 显示Hibernate持久化操作所生成的SQL -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 将SQL脚本进行格式化后再输出 -->
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口(Spring)，是针对Hibernate的特定实现-->
	<bean id="transactionManager" class=
		"org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 配置事务切面(AOP)Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切面，匹配org.zs.hrsystem.service.impl包下
			所有以Impl结尾的类的所有方法的执行 -->
		<aop:pointcut id="zsPointcut"
			expression=
			"execution(* org.zs.hrsystem.service.impl.*Impl.*(..))"/>
		<!-- 指定在txAdvice切入点应用txAdvice事务切面 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="zsPointcut"/>
	</aop:config>
	
	<!--业务逻辑层been定义： 定义业务逻辑组件模板 -->
	<!--注意：Action配置中并未指定Action与服务层been的注入关系，而是由Spring容器自动装配给Action对象 -->
    <bean id="managerTemplate" abstract="true" lazy-init="true">
		<!-- 为业务逻辑组件注入DAO组件 -->
        <property name="empDao" ref="employeeDao"/>
        <property name="mgrDao" ref="managerDao"/>
        <property name="attendDao" ref="attendDao"/>
        <property name="typeDao" ref="attendTypeDao"/>
        <property name="appDao" ref="appDao"/>
        <property name="payDao" ref="payDao"/>
        <property name="checkDao" ref="checkDao"/>
	</bean>
	<!-- 定义两个业务逻辑组件，继承业务逻辑组件的模板 -->
    <bean id="empManager"
		class="org.zs.hrsystem.service.impl.EmpManagerImpl"
		parent="managerTemplate"/>
    <bean id="mgrManager"
		class="org.zs.hrsystem.service.impl.MgrManagerImpl"
		parent="managerTemplate"/>
	<!-- 自动结算：定义触发器来管理任务Bean -->
	<bean id="cronTriggerPay" 
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean 
			class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="org.zs.hrsystem.schedule.PayJob"/>
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="empMgr" value-ref="empManager"/>
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：每月3日2时启动 -->
		<property name="cronExpression" value="0 45 23 24 * ? *"/>
	</bean>
	
	<!-- 自动打卡：定义触发器来管理任务Bean -->
	<bean id="cronTriggerPunch" 
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean
			class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类,自动打卡 -->
				<property name="jobClass" value="org.zs.hrsystem.schedule.PunchJob"/>
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="empMgr" value-ref="empManager"/>
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：周一到周五7点、12点执行调度 -->
		<!-- <property name="cronExpression" 
			value="0 0 7,12 ? * MON-FRI"/> -->
			
		<property name="cronExpression" 
			value="0 05 9,22 ? * MON-SUN"/>
	</bean>
	
	<!-- 自动打卡、结算：执行实际的调度调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="cronTriggerPay"/>
				<ref local="cronTriggerPunch"/>
			</list>
		</property>
	</bean>
	<!-- init-method 测试 -->
</beans>